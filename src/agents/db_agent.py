"""
Author: Malkit Bhasin
Date: 2025-09-06
==========================
==Tax Auditor Assistant==
==========================
This agent is for intration with database

Workflow Overview:
1. Load config and credentials from .env
2. Register tools with the agent - AgenticRagTool, SQL Tool
3. Run the agent with user input and print response
"""
import os
from typing import Dict
from pathlib import Path
from dotenv import load_dotenv
import logging
import asyncio

from oci.addons.adk import Agent, AgentClient
from oci.addons.adk.run.types import InlineInputLocation, ObjectStorageInputLocation
from oci.addons.adk.tool.prebuilt.agentic_sql_tool import AgenticSqlTool, SqlDialect, ModelSize
from oci.addons.adk import Agent, AgentClient, tool
from oci.addons.adk.tool.prebuilt import AgenticRagTool

# --- MODIFIED: Import the new structured prompts ---
from src.prompts.prompts import DB_AGENT_GENERIC_PROMPT, DB_AGENT_PROMPTS_BY_CLASSIFICATION
# ────────────────────────────────────────────────────────
# 1) bootstrap paths + env + llm
# ────────────────────────────────────────────────────────
logging.getLogger('adk').setLevel(logging.INFO)

THIS_DIR     = Path(__file__).resolve()
PROJECT_ROOT = THIS_DIR.parent.parent.parent

load_dotenv(PROJECT_ROOT / "config/.env")  # expects OCI_ vars in .env

# Set up the OCI GenAI Agents endpoint configuration
OCI_CONFIG_FILE = os.getenv("OCI_CONFIG_FILE")
OCI_PROFILE = os.getenv("OCI_PROFILE")
AGENT_REGION = os.getenv("AGENT_REGION")
AGENT_SERVICE_EP = os.getenv("AGENT_SERVICE_EP")
DB_AGENT_EP_ID = os.getenv("DB_AGENT_EP_ID")


INLINE_DATABASE_SCHEMA = '''
    -- 1. Customers Table
    CREATE TABLE Customers (
        account_number VARCHAR2(255) PRIMARY KEY,
        customer_segment VARCHAR2(50)
    );


    -- 2. Transactions Table
    CREATE TABLE Transactions (
        transaction_number VARCHAR2(255) PRIMARY KEY,
        account_number VARCHAR2(255) NOT NULL,
        invoice_date DATE,
        amount NUMBER(10, 2) NOT NULL,
        currency_code VARCHAR2(3) NOT NULL, -- Renamed from CURRENCY
        CONSTRAINT fk_trans_customer FOREIGN KEY (account_number) REFERENCES Customers(account_number)
    );

    CREATE TABLE AccountUsage (
        usage_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        account_number VARCHAR2(255) NOT NULL,
        usage_date DATE,
        envelope_count NUMBER, -- Renamed from USAGE
        usage_notes VARCHAR2(255),
        CONSTRAINT fk_usage_customer FOREIGN KEY (account_number) REFERENCES Customers(account_number)
    );


    -- 4. Disputes Table
    -- This is the central table linking all information for a dispute.
    CREATE TABLE Disputes (
        dispute_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        account_number VARCHAR2(255) NOT NULL,
        transaction_number VARCHAR2(255),
        request_type VARCHAR2(100),
        customer_prompt CLOB NOT NULL, -- CLOB for long text
        dispute_status VARCHAR2(20) NOT NULL,
        outcome_details VARCHAR2(255),
        is_refund_in_progress NUMBER(1) DEFAULT 0, -- Using 0 for False, 1 for True
        is_duplicate_payment NUMBER(1) DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT fk_dispute_customer FOREIGN KEY (account_number) REFERENCES Customers(account_number),
        CONSTRAINT fk_dispute_trans FOREIGN KEY (transaction_number) REFERENCES Transactions(transaction_number)
    );        
                        '''
 
# --- MODIFIED: Replace flight data with your dispute schema description ---
INLINE_TABLE_COLUMN_DESCRIPTION = '''
    This database contains information about customer accounts, transactions, service usage, and billing disputes.

    Customers table:
    - Each row represents a single customer account.
    - "account_number": The unique identifier for a customer. This is the primary key.
    - "customer_segment": The business category of the customer, like 'SMB' or 'Enterprise'.

    Transactions table:
    - Each row is a financial transaction linked to a customer.
    - "transaction_number": The unique identifier for the transaction.
    - "account_number": Links the transaction to a customer in the Customers table.
    - "invoice_date": The date the transaction was invoiced.
    - "amount": The monetary value of the transaction.
    - "currency_code": The three-letter currency code for the amount (e.g., 'USD', 'EUR').

    AccountUsage table:
    - Tracks customer activity and service usage.
    - "usage_id": The unique ID for the usage record.
    - "account_number": Links the usage record to a customer.
    - "usage_date": The date the usage was recorded.
    - "envelope_count": The number of eSign envelopes used by the customer.
    - "usage_notes": Comments about the customer's activity, such as 'No Logged In' or 'Recent Usage'.

    Disputes table:
    - This is the main table, containing details for each customer dispute.
    - "dispute_id": The unique identifier for the dispute.
    - "account_number": Links the dispute to a customer.
    - "transaction_number": Links the dispute to a specific transaction, if applicable.
    - "request_type": The category of the dispute, like 'Unauthorized Charge' or 'Double Billing'.
    - "customer_prompt": The full text of the customer's complaint.
    - "dispute_status": The current status, such as 'Accepted' or 'Rejected'.
    - "outcome_details": The final resolution or reason for the status.
    - "is_refund_in_progress": A flag (1 for yes, 0 for no) indicating if a refund is being processed.
    - "is_duplicate_payment": A flag (1 for yes, 0 for no) indicating if the charge was a duplicate.
    - "created_at": The timestamp when the dispute was recorded.
'''

# ────────────────────────────────────────────────────────
# 2) Logic
# ────────────────────────────────────────────────────────
def agent_flow():

    client = AgentClient(
        auth_type="api_key",
        config=OCI_CONFIG_FILE,
        profile=OCI_PROFILE,
        region=AGENT_REGION
    )

    # --- MODIFIED: Instructions are now more generic, as specifics are passed in the prompt ---
    instructions = (f"You are an agent that retrieves customer dispute information from a database by executing SQL queries. "
                    f"You must follow the detailed instructions provided in the user's prompt to fetch the correct data.")

    custom_instructions = (f"The database contains customer account, transaction, and dispute data. Your task is to answer questions by generating and executing SQL queries. "
                           f"For example, to get a customer's full history, you need to query multiple tables and join them.")
    # Instantiate a SQL Tool
    sql_tool_with_inline_schema = AgenticSqlTool(
        name="Dispute Resolution DB Tool",
        description="A tool to retrieve customer transaction, usage, and dispute data from an Oracle database.",
        database_schema=InlineInputLocation(content=INLINE_DATABASE_SCHEMA),
        model_size=ModelSize.LARGE,
        dialect=SqlDialect.ORACLE_SQL,
        db_tool_connection_id="ocid1.databasetoolsconnection.oc1.us-chicago-1.amaaaaaayanwdzaauwk7ghmrkwojxspv2tcodt43geihocpe4yrendkxtyja",
        enable_sql_execution=True,
        enable_self_correction=True,
        # icl_examples=ObjectStorageInputLocation(namespace_name="namespace", bucket_name="bucket", prefix="_sql.icl_examples.txt"),
        table_and_column_description=InlineInputLocation(content=INLINE_TABLE_COLUMN_DESCRIPTION),
        custom_instructions=custom_instructions
    )

    agent = Agent(
        client=client,
        agent_endpoint_id=DB_AGENT_EP_ID,
        instructions=instructions,
        tools=[
            sql_tool_with_inline_schema
        ]
    )

    return agent


def db_agent_flow():
    return agent_flow()

# --- MODIFIED: Function now accepts user_prompt and classification ---
def run_db_query(user_prompt: str, classification: str) -> str:
    """
    Initializes and runs the DB agent with a detailed, structured prompt.
    Handles asyncio event loop for Streamlit compatibility.
    """
    # --- FIX for Streamlit's threading ---
    try:
        loop = asyncio.get_running_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
    # ------------------------------------

    # 1. Get the specific prompt for the classification
    specific_prompt = DB_AGENT_PROMPTS_BY_CLASSIFICATION.get(classification, "No specific instructions for this classification. Please retrieve all relevant data.")

    # 2. Construct the full prompt for the agent
    full_prompt = f"""
    {DB_AGENT_GENERIC_PROMPT}

    [ --- CURRENT TASK --- ]
    The user's issue has been classified as: "{classification}"
    {specific_prompt}

    [ --- USER DISPUTE TO ANALYZE --- ]
    "{user_prompt}"
    """

    agent = db_agent_flow()
    agent.setup()
    
    # 3. Run the agent with the fully constructed prompt
    response = agent.run(full_prompt)
    
    final_message = response.data["message"]["content"]["text"]
    return final_message

# MODIFIED main block for standalone testing
if __name__ == "__main__":
    test_prompt = "I was charged twice this month for the same subscription! This is unacceptable. My account is 4567891230."
    test_classification = "Double Billing"
    
    print(f"--- Testing DB Agent with classification: '{test_classification}' ---")
    response_text = run_db_query(test_prompt, test_classification)
    print("\n--- DB Agent Response ---")
    print(response_text)